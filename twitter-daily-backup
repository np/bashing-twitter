#!/bin/bash
# vim: nospell

error(){
  local code="$1"
  shift
  echo "$@" >>/dev/stderr
  exit "$code"
}

insist(){
  try-10-times "$@"
}


mapM_(){
  local cmd=( )
  local doit=0
  for arg; do
    if ((doit)); then
      "${cmd[@]}" "$arg"
    elif [[ $arg = -- ]]; then
      doit=1
    else
      cmd=("${cmd[@]}" "$arg")
    fi
  done
}


# Setup
y=$(date +%Y)
d=$(date +%Y-%m-%d)
DIR=/var/spool/twitter
HOURLY="$DIR/hourly-backup"
DAILY="$DIR/daily-backup/$y/$d"
CONF=$HOME/.bashing-twitter
[ -e "$CONF" ] || error 1 "\`$CONF' should exists"
. "$CONF"
[ -n "$FROM" ] || error 1 "\`$CONF' should define FROM"
[ -n "$TO" ]   || error 1 "\`$CONF' should define TO"

# Main work
mkdir -p "$DAILY"
mapM_ json-lines -- "$HOURLY/${d}"_*.json | sort -u | json-unlines \
  > "$DAILY/timeline.json"
insist twitter-friends -a -f > "$DAILY/followers.json"
insist twitter-friends -a    > "$DAILY/friends.json"
# TODO: when we get over 100...
twitter-mentions      > "$DAILY/mentions.json"

# Sending report
(
  cat <<EOS
From: $FROM
To: $TO
Subject: ${SUBJECT:-"Twitter Daily Backup on $(hostname) at ${d}"}
${HEADERS:-}

EOS
  wc -l "$HOURLY/${d}"_*.json
  wc -l "$DAILY/timeline.json"
  wc -l "$DAILY/followers.json"
  wc -l "$DAILY/friends.json"
  wc -l "$DAILY/mentions.json"
) | msmtp --read-recipients --read-envelope-from
